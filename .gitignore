import streamlit as st
from datetime import date
import yfinance as yf
from prophet import Prophet
from prophet.plot import plot_plotly
from plotly import graph_objs as go
import pandas as pd

START = "2015-01-01"
TODAY = date.today().strftime("%Y-%m-%d")

st.title('Stock Forecast App')

stocks = ('GOOG', 'AAPL', 'MSFT', 'GME')
selected_stock = st.selectbox('Select dataset for prediction', stocks)

n_years = st.slider('Years of prediction:', 1, 4)
period = n_years * 365

# Using st.cache_data instead of st.cache
@st.cache_data
def load_data(ticker):
    try:
        data = yf.download(ticker, START, TODAY)
        if data.empty:
            st.error(f"No data found for ticker {ticker}. Please try another one.")
            return pd.DataFrame()  # Return empty dataframe
        data.reset_index(inplace=True)
        return data
    except Exception as e:
        st.error(f"Error fetching data: {e}")
        return pd.DataFrame()

data_load_state = st.text('Loading data...')
data = load_data(selected_stock)
data_load_state.text('Loading data... done!')

# Print the first few rows of the dataset to inspect its structure
st.write("First few rows of the dataset:")
st.write(data.head())

# Inspect columns structure before stripping
st.write("Columns in the dataset:")
st.write(data.columns)

# Fixing MultiIndex issue and flattening columns
if isinstance(data.columns, pd.MultiIndex):
    st.write("Columns are a MultiIndex. Flattening the MultiIndex...")
    # Flatten the MultiIndex columns into a single level by joining the levels
    data.columns = [' '.join(col).strip() for col in data.columns.values]
    st.write("Flattened columns:")
    st.write(data.columns)
else:
    st.write("Columns are not a MultiIndex, proceeding with standard operations.")

# Now strip spaces from column names
data.columns = data.columns.str.strip()

# Check if 'Close' and 'Open' columns exist
if 'Close' not in data.columns or 'Open' not in data.columns:
    st.error("'Close' or 'Open' columns are missing from the data.")
else:
    # Drop rows with missing values in the 'Close' column
    data.dropna(subset=['Close'], inplace=True)

    # Check for missing values in the dataset
    st.write("Checking for missing values in the dataset:")
    st.write(data.isnull().sum())  # Show number of missing values in each column

    # Ensure there are enough rows for Prophet
    if len(data) < 2:
        st.error("Not enough data to perform the prediction. Please select a different stock or time range.")
    else:
        st.subheader('Raw data')
        st.write(data.tail())

        # Plot raw data
        def plot_raw_data():
            fig = go.Figure()
            if 'Date' in data.columns and 'Open' in data.columns and 'Close' in data.columns:
                fig.add_trace(go.Scatter(x=data['Date'], y=data['Open'], name="stock_open"))
                fig.add_trace(go.Scatter(x=data['Date'], y=data['Close'], name="stock_close"))
                fig.layout.update(title_text='Time Series data with Rangeslider', xaxis_rangeslider_visible=True)
                st.plotly_chart(fig)
            else:
                st.error("Required columns ('Open', 'Close', 'Date') are missing in the dataset.")

        plot_raw_data()

        # Predict forecast with Prophet.
        df_train = data[['Date', 'Close']]
        df_train = df_train.rename(columns={"Date": "ds", "Close": "y"})

        m = Prophet()
        m.fit(df_train)
        future = m.make_future_dataframe(periods=period)
        forecast = m.predict(future)

        # Show and plot forecast
        st.subheader('Forecast data')
        st.write(forecast.tail())

        st.write(f'Forecast plot for {n_years} years')
        fig1 = plot_plotly(m, forecast)
        st.plotly_chart(fig1)

        st.write("Forecast components")
        fig2 = m.plot_components(forecast)
        st.write(fig2)
